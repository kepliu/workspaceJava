package oracle.javaTutorial;

import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;

public class TestPerson {
//	interface CheckPerson {
//	    boolean test(Person p);
//	}
//	public static void printPersons(
//		    List<Person> roster, CheckPerson tester) {
//		    for (Person p : roster) {
//		        if (tester.test(p)) {
//		            p.printPerson();
//		        }
//		    }
//		}
	public static void printPersons(
		    List<Person> roster, Predicate<Person> tester) {
		    for (Person p : roster) {
		        if (tester.test(p)) {
		            p.printPerson();
		        }
		    }
		}
	public static void processPersons(
		    List<Person> roster,
		    Predicate<Person> tester,
		    Consumer<Person> block) {
		        for (Person p : roster) {
		            if (tester.test(p)) {
		                block.accept(p);
		            }
		        }
		}
	public static void processPersonsWithFunction(
		    List<Person> roster,
		    Predicate<Person> tester,
		    Function<Person, String> mapper,
		    Consumer<String> block) {
		    for (Person p : roster) {
		        if (tester.test(p)) {
		            String data = mapper.apply(p);
		            block.accept(data);
		        }
		    }
		}
	public static <X, Y> void processElements(
		    Iterable<X> source,
		    Predicate<X> tester,
		    Function <X, Y> mapper,
		    Consumer<Y> block) {
		    for (X p : source) {
		        if (tester.test(p)) {
		            Y data = mapper.apply(p);
		            block.accept(data);
		        }
		    }
		}
	public static void main(String[] args) {
		List<Person> roster = Person.createRoster();
		
//		printPersons(
//			    roster,
//			    new CheckPerson() {
//			        public boolean test(Person p) {
//			            return p.getGender() == Person.Sex.MALE
//			                && p.getAge() >= 18
//			                && p.getAge() <= 25;
//			        }
//			    }
//			);
//		printPersons(
//			    roster,
//			    ( p) -> p.getGender() == Person.Sex.MALE
//			        && p.getAge() >= 18
//			        && p.getAge() <= 25
//			);
		processPersons(
			     roster,
			     p -> p.getGender() == Person.Sex.MALE
			         && p.getAge() >= 18
			         && p.getAge() <= 25,
			     p -> p.printPerson()
			);	
		processPersonsWithFunction(
			    roster,
			    p -> p.getGender() == Person.Sex.MALE
			        && p.getAge() >= 18
			        && p.getAge() <= 25,
			    p -> p.getEmailAddress(),
			    email -> System.out.println(email)
			);
		processElements(
			    roster,
			    p -> p.getGender() == Person.Sex.MALE
			        && p.getAge() >= 18
			        && p.getAge() <= 25,
			    p -> p.getEmailAddress(),
			    email -> System.out.println(email)
			);
		roster
	    .stream()
	    .filter(
	        p -> p.getGender() == Person.Sex.MALE
	            && p.getAge() >= 18
	            && p.getAge() <= 25)
	    .map(p -> p.getEmailAddress())
	    .forEach(email -> System.out.println(email));
	}

}
